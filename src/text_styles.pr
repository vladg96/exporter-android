<?xml version="1.0" encoding="utf-8"?>
<resources>

{[ let fontsMap = {} /]}

{[ const brand = ds.currentBrand() /]}
{[ const typographyTokensTree = ds.tokenGroupTreeByType("Typography", brand.id) /]}

{[ traverse typographyTokensTree property subgroups into typographyTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(typographyTokenGroup) /]}
  {[ const typographyTokenInGroups = ds.tokensByGroupId(typographyTokenGroup.id) /]}
  {[ for typographyToken in typographyTokenInGroups ]}
    {[ const fullTokenPath = arrayConcat(fullTokenGroupPath, typographyToken.name) /]}
    {[ const fullTokenName = arrayJoin(fullTokenPath, " ") /]}
    
    {[ if (typographyToken.description && typographyToken.description !== "") ]}
    <!-- 
        {{ indentMultilineText(typographyToken.description, "        ") }} 
    -->
    {[/]}
    <style name="{[ inject "export_camelcased_token_name" context fullTokenName /]}">
        <item name="android:textSize">{{ typographyToken.value.fontSize.measure }}sp</item>
        {[ const letterSpacing = typographyToken.value.letterSpacing /]}
        {[ if letterSpacing ]}
        <item name="android:letterSpacing">{{ letterSpacing.measure }}</item>
        {[/]}
        {[ const font = typographyToken.value.font /]}
        {[ if font ]}
          {[ let familyName = font.family.snakecased()  /]}
          {[ let subfamilyName = font.subfamily.snakecased()  /]}
          {[ let fontName = familyName.suffixed("_").suffixed(subfamilyName) /]}
          {[ fontsMap = fontsMap.add(fontName, font) /]}
        <item name="android:fontFamily">@font/{{ fontName }}</item>
          {[ let fontStyles = [] /]}
          {[ if ds.isFontItalic(font) ]}
            {[ fontStyles = arrayConcat(fontStyles, "italic") /]}
          {[/]}
          {[ if ds.isFontItalic(font) ]}
            {[ fontStyles = arrayConcat(fontStyles, "bold") /]}
          {[/]}
          {[ let textStyle = arrayJoin(fontStyles, "|") /]}
        <item name="android:textStyle">{{ (textStyle.count() === 0) ? "normal" : textStyle}}</item>
        {[/]}
    </style>
  {[/]}

{[/]}

</resources>
{[ inject "fonts" context fontsMap /]}
